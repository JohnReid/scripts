#!/usr/bin/python2

import logging
logging.basicConfig(level=logging.INFO)

import subprocess
import cPickle
import sys
import os
import time
from rpy2 import robjects
from rpy2.robjects.packages import importr
import rpy2.robjects.lib.ggplot2 as ggplot2

def dd_cmd(in_drive, out_drive):
    subprocess.check_call([
        '/bin/dd',
        'bs=1M',
        'count=256',
        'if=%s' % os.path.join(in_drive, 'infile'),
        'of=%s' % os.path.join(out_drive, 'outfile'),
        'conv=fdatasync',
    ])


def tar_cmd(in_drive, out_drive, filename='large.tgz'):
    subprocess.check_call([
        'tar',
        '-zxf', os.path.join(in_drive, filename),
        '-C', out_drive,
    ])


drives = sys.argv[1:]
drives = ('tmp', 'home', 'project', 'scratch')


try:
    indrives, outdrives, times
except NameError:
    indrives = []
    outdrives = []
    times = []


def time_cmds(drives, numrepeats=30):
    for i in xrange(numrepeats):
        for in_drive in drives:
            infile = os.path.join(in_drive, 'infile')
            for out_drive in drives:
                logging.debug('Reading from %8s; writing to %8s', in_drive, out_drive)
                start = time.time()
                tar_cmd(in_drive, out_drive, filename='large.tgz')
                duration = time.time() - start
                times.append(duration)
                indrives.append(in_drive)
                outdrives.append(out_drive)
                logging.info('Took %6.1f seconds to read from %8s and write to %8s',
                    duration, in_drive, out_drive)


time_cmds(drives)
cPickle.dump((indrives, outdrives, times), open('times.pickle', 'w'))


df = robjects.DataFrame({
    'times' : robjects.FloatVector(times),
    'indrives' : robjects.StrVector(indrives),
    'outdrives' : robjects.StrVector(outdrives),
})


grdevices = importr('grDevices')

def plot_times(filename, df, fill, log=False, density=False):
    logging.info('Creating plot: %s', filename)
    grdevices.png(file=filename, width=512, height=512)
    gp = ggplot2.ggplot(df)
    pp = gp
    if density:
        pp += ggplot2.aes_string(x='times', fill=fill)
        pp += ggplot2.geom_density(alpha=.5)
        if log:
            pp += ggplot2.scale_x_log10()
    else:
        pp += ggplot2.aes_string(y='times', x=fill)
        pp += ggplot2.geom_boxplot()
        if log:
            pp += ggplot2.scale_y_log10()
    pp.plot()
    grdevices.dev_off()

for log in (True, False):
    logtag = log and '-log' or ''
    for density in (True, False):
        densitytag = density and '-density' or '-box'
        for out in (True, False):
            outtag = out and '-out' or '-in'
            filename = 'times-by%s%s%s.png' % (outtag, densitytag, logtag)
            plot_times(
                filename,
                df,
                out and "outdrives" or 'indrives',
                log=log,
                density=density)

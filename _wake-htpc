#!/usr/bin/env python

"""Wake-on-LAN"""

import socket
import struct
import logging
import itertools

_logger = logging.getLogger(__name__)


def grouper(iterable, n, fillvalue=None):
    """Collect data into fixed-length chunks or blocks.

    ```python
    grouper('ABCDEFG', 3, 'x') --> ABC DEF Gxx
    ```

    From itertools documentation examples.
    Also found in more-itertools package."""
    args = [iter(iterable)] * n
    return itertools.zip_longest(*args, fillvalue=fillvalue)


def pack_hex(hex_str):
    _logger.debug(hex_str)
    return struct.pack('B', int(hex_str, 16))


def wrangle_macaddress(macaddress):
    """Check macaddress format and try to compensate."""
    if len(macaddress) == 12:
        pass
    elif len(macaddress) == 12 + 5:
        sep = macaddress[2]
        macaddress = macaddress.replace(sep, '')
    else:
        raise ValueError(f'Incorrect MAC address format: {macaddress}')
    return macaddress


def wake_on_lan(macaddress):
    """Switches on remote computers using wake-on-LAN.

    Use MAC address with any separators or without separators:

    ```python
    wake_on_lan('0F:0F:DF:0F:BF:EF')
    wake_on_lan('0F-0F-DF-0F-BF-EF')
    wake_on_lan('0F0FDF0FBFEF')
    ```

    """

    macaddress = wrangle_macaddress(macaddress)
    _logger.info('Using MAC address: %s', macaddress)

    # Pad the synchronization stream.
    data = ''.join(['FFFFFFFFFFFF', macaddress * 20])
    send_data = ''
    _logger.debug('data: %s', data)

    # Split up the hex values and pack.
    send_data = b''.join(map(pack_hex, map(''.join, grouper(data, 2))))
    _logger.debug('send_data: %s', send_data)

    _logger.info('Broadcasting to LAN')
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    sock.sendto(send_data, ('<broadcast>', 7))


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    wake_on_lan('00:27:0E:03:FB:9D')
